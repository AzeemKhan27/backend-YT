::::::::::: Notes  ::::::::::::::::::::

1- gitignore generator :- copy ignored files from and pasted in .gitignore files
2- changes in package.json :- : "dev" : "nodemon src/index.js"
3- in src folder : mkdir controllers db middlewares models routes utils
4- changes in package.json :- : "dev" : "nodemon -r dotenv/config --experimental-json-modules src/index.js "
5- addition in app.js eg: import express,cors,cookieParser.
   app.use(cors({
      origin : process.env.CORS_ORIGIN,
      credentials : true
   }))   

6- create a new file in utils folder : 

    (i)   asyncHandler.js   // here handle async and cover in rapper function
    (ii)  ApiError.js      // here we handle Api-Errors and over-write nodejs Error constructor.
    (iii) ApiResponse.js // here we structured our response to send.

7- create 2 models in models folder : user.modeler.model, video.model.js 

8- create account in cloudinary SDK: -
   Link :- https://console.cloudinary.com/pm/c-6ae8a78a674ee219ff3c1acdd98303/getting-started

9- :::::::::::::::::::::::: Headers ::::::::::::::::::::::::::::::   

    REQUEST HEADER --> FROM CLIENT (COMING DATA FROM CLIENT)
    RESPONSE HEADER --> FROM SERVER (COMING DATA FROM SERVER)
    REPRESENTATION HEADER --> ENCODING/COMPRESSION
    PAYLOAD HEADER --> DATA

    META DATA :- Key value sent along with request and response.


  ||||  Most Common Headers : |||||

    Accept : application/json
    User-Agent --> it tells request comes from which application eg: POSTMAN, User
    Authorization --> Bearer token
    Content-Type  --> what we are sending like "images,video.
    Cookie        --> We passed information object in cookies like "user login time limit" etc
    Cache-Control --> when we expire data from server if data want to in control in network.

  |||||  CORS  |||||

  Access-Control-Allow-Origin -->
  Access-Control-Allow-Credentials -->
  Access-Control-Allow-Method -->

  ||||  Security ||||

  Cross-Origin-Embedder-Policy -->
  Cross-Origin-Opener-Policy -->
  Content-Security-Policy -->
  X-XSS-Protection -->

  :::::  HTTP STATUS CODE :::::
  100 - 199  ---> Informational
  200 - 299  ---> Success
  300 - 399  ---> Redirection
  400 - 499  ---> Client Error
  500 - 599  ---> Server Error

  Diagram detailed link ==> https://app.eraser.io/workspace/05WNkLLTPZ8YS628n8w0?origin=share

(10) 
 - controllers and router file created and routers.
 - imported in app.js
 - using middlewares.

:::::::::::Package Installed ::::::::::::::
> npm i -D nodemon
> npm i mongoose express dotenv
> npm i cookie-parser cors          //import in app.js

prettier : it must be installed because when we work in github with team, it will be make same format, and we will ignored conflicts.
note : but there we will have to create some files eg : .prettierrc , .prettierignore

> npm i mongoose-aggregate-paginate-v2
> npm i bcrypt jsonwebtoken

--------------------------
code in .prettierrc :
--------------------------
{
    "singleQuoted" : false,
    "bracketSpacing" : true,
    "tabWidth" : 2,
    "trailingComma" : "es5",
    "semi" : true
}
------------------------------------------------
code in .prettierignore : >>> npm i -D prettier
------------------------------------------------
/.vscode
/node_modules
./dist

*.env
.env
.env.*

--------------------------
NOTES and Details :-
--------------------------

1- cookieParser :- we used cookieParser for set/access cookies from user browser to perform CRUD operation.
2- middleware :- middleware helps to give access user to authorized user and protect our routes from un-authorized user and we used in routes.
diagram link :- https://app.eraser.io/workspace/uWc7n4noBFcLcX6zvde8?origin=share

3- Higher Order Functions :- HOF accept functions as a parameter or return basically it treat as a variable.


::: what is middlewares : somecode we have to run in between, 

eg :- we got a request and before fulfilled the request from server, I want to set checks.

::::::::::: data handler , data modeling ::::::::::::::::::::

1- MOON MODIFIER --> https://www.datensen.com/data-modeling/moon-modeler-for-databases.html
2- ERASOR.IO --> https://www.eraser.io/

:::::::::: Node Evironment Provider Online :::::::::::::::::

1- codesandbox --> https://codesandbox.io/
2- stackblitz -->  https://stackblitz.com/
3- github codespace --> https://github.com/features/codespaces

:::::::::: Nodejs Models Code ::::::::::::
1- stackblitz --> https://stackblitz.com/edit/stackblitz-starters-zf9qqu